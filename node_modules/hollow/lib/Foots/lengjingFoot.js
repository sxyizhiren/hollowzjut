var assert=require('assert');
var Tools=require('../shareTool');
var msgType=Tools.messageType;
var buildAtString=Tools.buildAtString;
var addTryTimeAndWhetherFull=Tools.addTryTimeAndWhetherFull
var Step=require('step');
var querystring=require('querystring');
var Request=require('node-request');
var path=require('path');
var StateThief=require('./stateSource.js').INST;
var fs=require('fs');

//安装窃听器的地点
var listenPlaces=[
	'厕所里面'
	,'内裤中'
	,'枕头下'
	,'床底下'
	,'袜子里面'
	,'天花板上'
	,'电脑机箱里面'
	,'抽屉里'
	,'杯具中'
	,'牙膏里面'
	,'鞋底下'
	,'浴缸内'
	,'马桶水箱里'
	,'物化课本中'
	,'高数课本某一页中'
	,'校园卡芯片内'
	,'手机电池中'
	,'眼睛镜架上'
	,'手表中'
	,'英语课本内'
];

var FootType='Lengjing_Foot';
/**
 * 处理类
 * @constructor
 */
var Foot=function(){
    var callbackFn; //外部回调函数
    var LoginInfo;  //登录信息
    var UserIDList; //监视的用户列表
    var numPerGet=1;//每次取的状态个数
    var stateIntervalTime=60;//读取状态的间隔时间，可以设大一点，比如1分钟或更大
    var checkIDTime=10;//检查id是否正确的时间间隔
    var userIDFile='watchUserID.json';//文件名
    //////////////
    /**
     * 初始化，配置一些参数
     * @param loginInfo
     */
    this.init=function(loginInfo,resv){
        assert(typeof loginInfo === 'object');
        LoginInfo=loginInfo;
        readUserIDList();
    };

    /**
     * 开始工作
     * @param callback
     */
    this.run=function(callback){
        assert(typeof callback === 'function');
        callbackFn=callback;
        process.nextTick(Doing);
    };

    /**
     * 工作内容
     * @constructor
     */
    var Doing=function(){
        loopWatchUser();
    };

    /**
     * 读取列表
     */
    var readUserIDList=function(){
        UserIDList=JSON.parse(fs.readFileSync(userIDFile,'utf8'));
        for(var userid in UserIDList){
            var userinfo=UserIDList[userid];
            userinfo.gsThief=new StateThief();
            userinfo.lastId=(userinfo.lastId || 0);
        }
    };

    /**
     * 循环监视用户
     */
    var loopWatchUser=function(userid){
        if(!userid){
            var tm=1000;
            for(var userid in UserIDList){
                setTimeout(loopWatchUser,tm,userid);
                tm +=1000;
            }
        }else{
			console.log('get user state :'+userid);
			UserIDList[userid].gsThief.getStateList(userid,LoginInfo.Cookie,numPerGet,getStateCallback);
		}
    };

    /**
     * 刷新UserIDList到文件中
     */
    var flushList=function(){
        console.log(UserIDList);
	    fs.writeFileSync(userIDFile,JSON.stringify(UserIDList,null,4), 'utf8');
    }

    /**
     * 向外推送新状态信息
     * @param state
     */
    var pushOutState=function(state){
        assert(typeof state === 'object');
	    var user=UserIDList[state.owner];
	    var atOwner=buildAtString(user.username,user.userid);
	    pushOutText(state.content+atOwner);
    }
	
	/**
	*向外推送安装窃听器的状态消息
	*/
	var pushOutWatchInfo=function(userid){
		var user=UserIDList[userid];
		var atOwner=buildAtString(user.username,user.userid);
		var idx=Math.floor(Math.random() * listenPlaces.length);
		var info='奥巴马在'+atOwner+'的'+listenPlaces[idx]+'安装了一只窃听器.'
		pushOutText(info);
	}
	
	/**
	*向外推送text消息
	*/
	var pushOutText=function(text){
		var description='「棱镜」'+'http://page.renren.com/601715540/channel-noteshow-909327382';
		callbackFn(FootType,msgType.textType,text+description);
	}

    /**
     * 向外推送错误信息
     * @param info
     */
    var pushOutError=function(info){
        assert(typeof info === 'object');
        callbackFn(FootType,msgType.errorType,info);
    }

    /**
     * 新状态处理函数
     * @param userid
     * @param gsList
     */
    var getStateCallback=function(userid,gsList){
        var needFlush = false;
        if(UserIDList[userid] && (gsList instanceof Array)){//返回的参数正常的话
            for(var i=gsList.length-1;i>=0;i--){    //遍历留言数组，从id最小的开始，逆序遍历
                var k = gsList[i]   //数组的某一项
                if(k.id > UserIDList[userid].lastId){//id有增长，说明有新的state
                    if(UserIDList[userid].lastId === 0){
                        //0是初始化时的lastId
                        //第一条不处理了，简化逻辑
                    }else{
                        pushOutState(k);
                    }
                    UserIDList[userid].lastId= k.id;
                    needFlush=true;
                }

            }

        }
        if(needFlush){
            flushList();
        }
        setTimeout(loopWatchUser,stateIntervalTime * 1000,userid);
    }


    /**
     * 把新的用户id加入列表并启动监视
     * @param gossipInfo
     */
    var pushInNewUserID=function(gossipInfo){
        assert(typeof gossipInfo === 'object');
        var guestID=gossipInfo.Content.guest;
        var guestName=gossipInfo.Content.name;
		if(UserIDList[guestID]){
			console.log('userid:%s is already in the watch list!',guestID);
		}else{
			var user={
				userid:guestID,
				username:guestName,
				gsThief:new StateThief(),
				lastId:0
			};
			UserIDList[guestID]=user;
			flushList();
			loopWatchUser(guestID);
		}
		pushOutWatchInfo(guestID);
        
    }

    /**
     * 检查这个userid是否有效，有效就加入监视列表，无效放弃
     */
    var checkUserID=function(user){
		console.log(user);
        var gsThief=new StateThief();
        var userid=user.userid;
        Step(
            function(){
                //maxlen传入0，获取全部状态信息，包括用户信息
                gsThief.getStateList(userid,LoginInfo.Cookie,0,this);
            },
            function(userid,gossipInfo){
				console.log(gossipInfo);
                if(!gossipInfo.Content.guest){  //guest即与userid值相同
                    //http失败了
                    if(!addTryTimeAndWhetherFull(user)){
                        setTimeout(checkUserID,checkIDTime*1000,user);
                    }else{
                        pushOutError(user);
                    }
                }else if(gossipInfo.Content.guest != LoginInfo.uid){
                    pushInNewUserID(gossipInfo);
                }else{
                    //错误的userid会转向自己的信息页
                    console.log('watch userid wrong!');
                    pushOutError(user);
                }
            }
        );


    };

    /**
     *
     * @param handid
     * @param messageid
     */
    this.accept=function(handid,messageid,message){
        if(messageid === msgType.watchType){
            //message应该是一个9位数的数值字符串
            assert(parseInt(message)>0);
            var user={
                userid:message
            };
            checkUserID(user);
        }
    };


}


exports.Foot=Foot;


